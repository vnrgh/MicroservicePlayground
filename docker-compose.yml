services:
  postgres_micro:
    container_name: postgres_micro
    image: postgres
    environment:
      POSTGRES_USER: orderservice_user
      POSTGRES_PASSWORD: orderpassword
      PGDATA: /data/postgres_micro
    volumes:
      - postgres_micro:/data/postgres_micro
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - postgres_micro
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    env_file:
      - data.env
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres_micro
    restart: unless-stopped

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_KRAFT_MODE=true
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_NODE_ID=1
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_LISTENERS=PLAINTEXT_INTERNAL://0.0.0.0:9092,PLAINTEXT_EXTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT_INTERNAL://kafka:9092,PLAINTEXT_EXTERNAL://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT_INTERNAL
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LOG_DIRS=/var/lib/kafka/data
      - CLUSTER_ID=Qhlk0PVNQhipKW4JHRI64g
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
    networks:
      - spring

  eureka-server:
    image: vnrghdocker/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    depends_on:
      - zipkin
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  api-gateway:
    image: vnrghdocker/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    depends_on:
      eureka-server:
        condition: service_healthy
      zipkin:
        condition: service_started

  customer:
    image: vnrghdocker/customer:latest
    container_name: customer
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres_micro
    depends_on:
      eureka-server:
        condition: service_healthy
      zipkin:
        condition: service_started
      postgres_micro:
        condition: service_started
      kafka:
        condition: service_started

  fraud:
    image: vnrghdocker/fraud:latest
    container_name: fraud
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres_micro
    depends_on:
      eureka-server:
        condition: service_healthy
      zipkin:
        condition: service_started
      postgres_micro:
        condition: service_started
      kafka:
        condition: service_started

  notification:
    image: vnrghdocker/notification:latest
    container_name: notification
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres_micro
    depends_on:
      eureka-server:
        condition: service_healthy
      zipkin:
        condition: service_started
      postgres_micro:
        condition: service_started
      kafka:
        condition: service_started

networks:
  postgres_micro:
    driver: bridge
  spring:
    driver: bridge

volumes:
  postgres_micro:
  pgadmin: